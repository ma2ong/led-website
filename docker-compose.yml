# Docker Compose配置
# 用于本地开发和生产部署

version: '3.8'

services:
  # PostgreSQL数据库
  database:
    image: postgres:15-alpine
    container_name: led-website-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-strapi_led_website}
      POSTGRES_USER: ${DATABASE_USERNAME:-strapi}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - led-website-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-strapi}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: led-website-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - led-website-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Strapi后端
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: led-website-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_CLIENT: postgres
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-strapi_led_website}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-strapi}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      APP_KEYS: ${APP_KEYS}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      CLOUDINARY_NAME: ${CLOUDINARY_NAME}
      CLOUDINARY_KEY: ${CLOUDINARY_KEY}
      CLOUDINARY_SECRET: ${CLOUDINARY_SECRET}
    volumes:
      - ./backend/public/uploads:/app/public/uploads
      - ./backend/logs:/app/logs
    ports:
      - "${BACKEND_PORT:-1337}:1337"
    networks:
      - led-website-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337/_health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Next.js前端（可选，通常部署到Vercel）
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: led-website-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_STRAPI_API_URL: http://backend:1337/api
      NEXT_PUBLIC_SITE_URL: ${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - led-website-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: led-website-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./backend/public:/var/www/uploads:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - led-website-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local

networks:
  led-website-network:
    driver: bridge